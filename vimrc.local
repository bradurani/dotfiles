set relativenumber
set autoread
set hlsearch
set ignorecase smartcase
set hidden
set incsearch
set shiftround
set gdefault
set mouse=c
set scrolloff=999
set t_ti= t_te=
set colorcolumn=0
set synmaxcol=250
set tw=0
"lag time for leader
set timeoutlen=500
"File tree nesting level
let g:netrw_liststyle=3
" Display extra whitespace
set list listchars=tab:»·,trail:·
" set undofile
" set undodir=~/.vim/undodir

"gitgutter
set signcolumn=yes

let g:lightline = {
      \ 'active': {
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileencoding', 'filetype'] ]
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \ },
      \}

function! LightlineFilename()
  return expand('%@%') !=# '' ? expand('%@%') : '[No Name]'
endfunction
" "syntastic
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 0
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 1
" let g:syntastic_javascript_checkers = ['eslint']
" "syntastic + vim-elm
" let g:elm_syntastic_show_warnings = 1

"vim-elm
let g:elm_format_autosave = 1

"vim-elm and Ycm
let g:ycm_semantic_triggers = {
      \ 'elm' : ['.'],
      \}
let g:elm_setup_keybindings = 0 "still a bunch of commands I need to map

" vim-jsx
let g:jsx_ext_required = 0
" javascript-libraries-syntax
let g:used_javascript_libs = 'jquery,react,flux,chai,ramda,handlebars'

"vim-rust
let g:rustfmt_autosave = 1

"vim-wordmotion
let g:wordmotion_mappings = {
      \ 'w' : '<tab>',
      \ 'b' : '<s-tab>',
      \ 'e' : '<c-tab>',
      \ 'ge' : 'g<c-tab>',
      \ 'aw' : 'a<tab>',
      \ 'iw' : 'i<tab>'
      \ }

" YouCompleteMe
let g:ycm_rust_src_path = '/usr/local/src/rust/src'

"elixir.nvim
let g:elixir_showerror=1
let g:elixir_autobuild=1
let g:elixir_docpreview=1

"alchemist
let g:alchemist#elixir_erlang_src = '/usr/local/Cellar/elixir/1.5.1'

"vim-test
"
let test#ruby#rspec#executable = 'tmux_unzoom; bin/rspec'
" let test#elixir#exunit#executable = 'iex -S mix test --trace'
let test#elixir#exunit#executable = 'tmux_unzoom; mix test'
let test#filename_modifier = ':~'

" gruvbox
"Color and UI
set background=dark
let g:gruvbox_italic=0
let g:gruvbox_contrast_dark='medium'
colorscheme gruvbox

"Write on entering and leaving buffers
au FocusGained,BufEnter * :silent! !
au FocusLost,WinLeave * :silent! w

au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline cursorcolumn
set cursorline cursorcolumn

aug CursorInsert
  au!
  "prevent the column from turning blue
  hi cursorcolumn ctermbg=237 cterm=NONE guibg=#3c3836 gui=NONE

  autocmd InsertLeave * highlight Cursorline ctermbg=236 ctermfg=NONE term=NONE cterm=NONE gui=NONE guibg=#3c3836
  autocmd InsertEnter * highlight Cursorline ctermbg=017 ctermfg=NONE term=NONE cterm=NONE gui=NONE guibg=#191894
aug END
hi MatchParen ctermbg=blue guibg=lightblue
"make error window automatically pop up for elm files
" autocmd FileType elm let g:syntastic_auto_loc_list = 1

au BufRead,BufNewFile *.es6 setf javascript
au BufRead,BufNewFile .eslint setf json
au BufRead,BufNewFile gitconfig set syntax=gitconfig
au BufRead,BufNewFile Gitfile setf yaml
au BufRead,BufNewFile pryrc setf ruby
au BufRead,BufNewFile Rakefile setf ruby
au BufRead,BufNewFile Dangerfile setf ruby
au BufRead,BufNewFile *.sbt setf scala

au FileType gitcommit setlocal spell
au FileType markdown setlocal spell

autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
" autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
" autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
" autocmd FileType ruby,eruby let g:rubycomplete_include_object = 1
" autocmd FileType ruby,eruby let g:rubycomplete_include_objectspace = 1

autocmd FileType json let g:vim_json_syntax_conceal = 0

" vim-jsbeautify
map <c-f> :call JsBeautify()<cr>
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
autocmd FileType json noremap <buffer> <c-f> :call JsonBeautify()<cr>
autocmd FileType jsx noremap <buffer> <c-f> :call JsxBeautify()<cr>
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
autocmd FileType scss noremap <buffer> <c-f> :call CSSBeautify()<cr>
autocmd FileType javascript vnoremap <buffer>  <c-f> :call RangeJsBeautify()<cr>
autocmd FileType json vnoremap <buffer> <c-f> :call RangeJsonBeautify()<cr>
autocmd FileType jsx vnoremap <buffer> <c-f> :call RangeJsxBeautify()<cr>
autocmd FileType html vnoremap <buffer> <c-f> :call RangeHtmlBeautify()<cr>
autocmd FileType css vnoremap <buffer> <c-f> :call RangeCSSBeautify()<cr>
autocmd FileType scss vnoremap <buffer> <c-f> :call RangeCSSBeautify()<cr>

"vim-better-whitespace
autocmd FileType ruby,elixir,javascript,scala autocmd BufWritePre <buffer> StripWhitespace

" let g:syntastic_csslint_args="--ignore=outline-none"
let g:ycm_semantic_triggers = {
      \   'css': [ 're!^\s{2}', 're!:\s+' ],
      \   'scss': [ 're!^\s{2}', 're!:\s+' ]
      \ }

autocmd FileType netrw setl bufhidden=wipe

autocmd FileType scala nnoremap <Leader>c :Tmux tmux_unzoom; sbt compile<CR>
autocmd FileType scala nnoremap <Leader>r :Tmux tmux_unzoom; sbt "run --run-all"<CR>

"permanently and unequivocably disable conceal
if version >= 703
  set conceallevel=0
  autocmd FileType * setlocal conceallevel=0
endif

"LEADER
"====FZF=====
"search mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

map <Leader>f :Files<CR>
map <Leader>r :History<CR>
map <Leader>l :Lines<CR>
map <Leader>b :Buffer<CR>
map <Leader>m :Marks<CR>
map <Leader>y :BTags<CR>
map <Leader>Y :Tags<CR>
map <Leader>; :History:<CR>
map <Leader>/ :History/<CR>

nnoremap <leader>jd :YcmCompleter GoTo<CR>

" autoindent file
map <Leader>i mzgg=G`z<CR>
autocmd FileType scala map <Leader>i :Neoformat<CR>

" replace the file, instead of updating buffer
let g:neoformat_scala_scalafmt = {
            \ 'exe': 'scalafmt',
            \ 'replace': 1 
            \ }

let g:neoformat_enabled_python = ['scalafmt']

map <Leader>rs :s/'/"<CR>
map <Leader>vs :source ~/.vimrc.local<CR>
" convert hash to Ruby 1.9 style
map <Leader>hs :s/:\([^ ]*\)\(\s*\)=>/\1:/g<CR>
"vim-ruby-refactor
map <Leader>e :RExtractMethod<CR>
"vim rails
map <Leader>a :A<CR>
map <Leader>s :AV<CR>

map <silent><Leader>w :wa<CR>

" vim-go
au FileType go nmap <leader>rr <Plug>(go-run)
au FileType go nmap <leader>rb <Plug>(go-build)
au FileType go nmap <leader>rt <Plug>(go-test)
au FileType go nmap <leader>rc <Plug>(go-coverage)
au FileType go nmap <leader>ri <Plug>(go-install)
au FileType go nmap <leader>rf :GoFmt<CR>
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
let g:go_fmt_autosave = 0

"vim-test
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>A :TestSuite<CR>
" nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>v  :TestVisit<CR>
let test#scala#scalatest#file_pattern = ".*Test.scala$"

"vim-infer-debugger
nmap <Leader>P :call AddDebugger("O")<cr>
nmap <Leader>p :call AddDebugger("o")<cr>
nmap <Leader>d :call RemoveAllDebuggers()<cr>

"vim-buffonly close all but current buffer
nnoremap <leader>Q :BufOnly<CR>
nnoremap <leader>o :only<BR>

"vim-power-close
nnoremap <silent> <leader>q :call powerclose#close()<CR>

" nmap <Leader>z :silent !tmux resize-pane -Z<CR>

" Tslime
" nnoremap <leader>rw :Tmux<space>
" vmap <C-c><C-c> <Plug>SendSelectionToTmux
" nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars
let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1

"vim-cargo
autocmd FileType rust map <Leader>rc :wa<CR> :CargoRun<CR>
autocmd FileType rust map <Leader>rt :wa<CR> :CargoTest<CR>

" Clear search highlight on Enter
function! MapCR()
  nnoremap <silent> <BS> :nohlsearch<CR>
endfunction
call MapCR()

"OMG OMG save when leaving insert mode
" inoremap <Esc> <Esc>:w<CR>

nmap k gk
nmap j gj

" map K mmi<CR><Esc>`m

" Automatically reselect text after indenting or unindenting in visual mode
xnoremap < <gv
xnoremap > >gv

xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

"http://ddrscott.github.io/blog/2016/yank-without-jank/
vnoremap <expr>y "my\"" . v:register . "y`y"

map <Right> :bn<CR>
map <Left> :bp<CR>
"http://vim.wikia.com/wiki/Moving_lines_up_or_down
" nnoremap <Down> :m .+1<CR>==
" nnoremap <Up> :m .-2<CR>==
" vnoremap <Down> :m '<+2<CR>gv=gv
" vnoremap <Up> :m '>-1<CR>gv=gv

" disable arrows in insert 'cause I can't prevent the stupid trackpad from
" sending arrow signals in Ubuntu
inoremap <Up> <nop>
inoremap <Down> <nop>
inoremap <Right> <nop>
inoremap <Left> <nop>

nnoremap \ :Ag<SPACE>
nnoremap & :Ag <C-R><C-W><CR>
"still can't figure out how to search for selected text in v mode (both / and Ag)

" ## Insert mode mappings ##
imap <c-e> <c-o>$
imap <c-a> <c-o>^
inoremap <C-\> <Del>
inoremap <C-x> <C-o>x

"## Control key mappings ##
:nnoremap <c-p> k$
:nnoremap <c-n> j^

:nnoremap <C-c> <C-w>c

"open current ctag in vertical split
map <C-\> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

"## Function keys ##
" function! ToggleErrors()
"   if empty(filter(tabpagebuflist(), 'getbufvar(v:val, "&buftype") is# "quickfix"'))
"     " No location/quickfix list shown, open syntastic error location panel
"     Errors
"   else
"     lclose
"   endif
" endfunction
" nnoremap <f7> :call ToggleErrors()<CR>

au FileType elm nnoremap <F9> :ElmErrorDetail<CR>

function! ToggleElixirTestCmd()
  if(g:test#elixir#exunit#executable == "tmux_unzoom; mix test")
    echo "iex -S mix test --trace"
    let g:test#elixir#exunit#executable = "tmux_unzoom; iex -S mix test --trace"
  else
    echo "mix test"
    let g:test#elixir#exunit#executable = "tmux_unzoom; mix test"
  endif
endfunction
nnoremap <F1> :call ToggleElixirTestCmd()<CR>

" let g:AutoPairsMultilineClose = 0
" let g:AutoPairsShortcutFastWrap = "<C-M>"
nnoremap <F12> :call AutoPairsToggle()<CR>

nnoremap <F2> :setlocal paste!<cr>

" "====== neovim =======
if has('nvim')
  :tnoremap <c-h> <C-\><C-n><C-w>h
  :tnoremap <c-j> <C-\><C-n><C-w>j
  :tnoremap <c-k> <C-\><C-n><C-w>k
  :tnoremap <c-l> <C-\><C-n><C-w>l
  :tnoremap <c-x> <C-\><C-n>
  :tnoremap <leader>q <C-\><C-n>:bd!<CR>


  " let test#strategy = "neoterm"
  let test#strategy = "tslime"

  let g:neoterm_clear_cmd = "clear; printf '=%.0s' {1..80}; clear"
  let g:neoterm_position = 'vertical'
  let g:neoterm_automap_keys = ',tt'
  let g:neoterm_split_on_tnew = 0

  "vim-cargo
  let g:cargo_command = ':T cargo {cmd}'

 set inccommand=nosplit

 let $NVIM_TUI_ENABLE_TRUE_COLOR=1
else
  let test#strategy = "tslime"
endif
